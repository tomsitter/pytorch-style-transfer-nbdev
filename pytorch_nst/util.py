# AUTOGENERATED! DO NOT EDIT! File to edit: 03_util.ipynb (unless otherwise specified).

__all__ = ['image_loader', 'image_unloader', 'imshow', 'show_all_images', 'save_image', 'random_img', 'loader',
           'unloader']

# Cell
import os

import torch
import torchvision.transforms as transforms

from PIL import Image
import matplotlib.pyplot as plt
import numpy as np
from pathlib import Path

from .config import device, imsize

loader = transforms.Compose([
    transforms.Resize(imsize),
    transforms.ToTensor()
])
unloader = transforms.ToPILImage()

plt.ion()

def image_loader(img):
    # Convert image to tensor, resize to appropriate size, and load it to device
    if not Image.isImageType(img):
        img = Image.open(img)

    img = loader(img).unsqueeze(0) # wrap image in tensor
    return img.to(device, torch.float)

def image_unloader(tensor):
    # Convert tensor back to a PIL image on the CPU
    image = tensor.cpu().clone()
    image = image.squeeze(0)
    return unloader(image)

def imshow(tensor, title=None):
    image = image_unloader(tensor)
    plt.imshow(image)
    if title is not None:
        plt.title(title)
    plt.pause(1)

def show_all_images(content, style, generated, title=None):
    c_image = image_unloader(content)
    s_image = image_unloader(style)
    g_image = image_unloader(generated)

    fig = plt.figure(figsize=(6,6))
    grid = plt.GridSpec(3,2)

    c_ax = fig.add_subplot(grid[-1,0])
    c_ax.axis('off')
    c_ax.imshow(c_image)
    c_ax.title.set_text("Content Image")

    s_ax = fig.add_subplot(grid[-1,1])
    s_ax.axis('off')
    s_ax.imshow(s_image)
    s_ax.title.set_text("Style Image")

    g_ax = fig.add_subplot(grid[0:2, :])
    g_ax.axis('off')
    g_ax.imshow(g_image)

    if title is not None:
        plt.title(title)

def save_image(tensor, filepath):
    Path(filepath).mkdir(parents=True, exist_ok=True)
    image = tensor_to_image(tensor)
    image.save(filepath)
    print(f'Saved image to {filepath}')

def random_img():
    return torch.rand(1, 3, imsize, imsize).to(device, torch.float)
